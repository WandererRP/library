{
	"info": {
		"_postman_id": "6542eef9-de51-4936-9364-af45efe039bd",
		"name": "LibraryApiService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23315031"
	},
	"item": [
		{
			"name": "book-controller",
			"item": [
				{
					"name": "findBookById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http:\\\\localhost:8081/books/33",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"books",
								"33"
							]
						},
						"description": "### Retrieve Book Details\n\nThis API endpoint retrieves details of a specific book based on the provided book ID.\n\n#### Request\n\n- Method: GET\n- Endpoint: `http:\\\\localhost:8081/books/{id}`\n    \n\nid - long - book identifier\n\n#### Response\n\nThe response is in JSON format and includes the following schema:\n\n**Response** (`200 OK`)\n\n``` json\n{\n    \"id\": 1,\n    \"title\": \"Harry Potter and the Philosopher's Stone\",\n    \"authorId\": 1,\n    \"authorName\": \"J.K. Rowling\"\n}\n\n ```\n\nThe response will include the details of the book such as its ID, title, author ID, and author name.\n\n#### Error Responses\n\n**Response** (`400 BAD REQUEST`) → Invalid request\n\n``` json\n{\n    \"timestamp\": \"2025-03-04T14:38:48.265455817\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"exception\": \"ResponseStatusExceptionBody\",\n    \"path\": \"/books/52d\",\n    \"code\": \"TYPE_MISMATCH\",\n    \"message\": \"Method parameter 'id': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: \\\"52d\\\"\"\n}\n\n ```\n\n**Response** (`404 NOT FOUND`) → Book not found\n\n``` json\n{\n    \"timestamp\": \"2025-03-04T14:41:00.801103759\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"exception\": \"ResponseStatusExceptionBody\",\n    \"path\": \"/books/33\",\n    \"code\": \"BOOK_NOT_FOUND\",\n    \"message\": \"Book not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "findAllBooks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http:\\\\localhost:8081/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"books"
							]
						},
						"description": "### Retrieve Books\n\nThis endpoint retrieves a list of books.\n\n#### Request\n\n- Method: GET\n- URL: `http:\\\\localhost:8081/books`\n    \n\n#### Response\n\nThe response is in JSON format and returns an array of objects with the following properties:\n\n- `id` (number): The unique identifier of the book.\n- `title` (string): The title of the book.\n- `authorId` (number): The unique identifier of the author of the book.\n- `authorName` (string): The name of the author of the book.\n    \n\nExample response body:\n\n**Response** (`200 OK`)\n\n``` json\n[\n    {\n        \"id\": 1,\n        \"title\": \"Harry Potter\",\n        \"authorId\": 1,\n        \"authorName\": \"J.K. Rowling\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Game of Thrones\",\n        \"authorId\": 2,\n        \"authorName\": \"George R.R. Martin\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"The Hobbit: or There and Back Again\",\n        \"authorId\": 3,\n        \"authorName\": \"J.R.R. Tolkien\"\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "addBook",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\":\"The Hobbit: or There and Back Again\",\r\n    \"authorId\":3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http:\\\\localhost:8081/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"books"
							]
						},
						"description": "### Add New Book\n\nThis endpoint allows the addition of a new book to the database.\n\n#### Request\n\n- Method: POST\n- URL: `http:\\\\localhost:8081/books`\n    \n    #### Request Body\n    \n- `title` (string): The title of the book.\n- `authorId` (long): The ID of the author of the book.\n    \n\n#### Response\n\nThe response will be a JSON object conforming to the following schema:  \n**Response** (`200 OK`)\n\n``` json\n{\n{\n    \"id\": 4,\n    \"title\": \"The Hobbit: or There and Back Again\",\n    \"authorId\": 3,\n    \"authorName\": \"John Ronald Reuel Tolkien\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "updateBook",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"id\": 1,\r\n        \"title\": \"Harry Potter and the Philosopher's Stone\",\r\n        \"authorId\": 1\r\n    }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http:\\\\localhost:8081/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"books"
							]
						},
						"description": "### Update Book Information\n\nThis endpoint allows the client to update book information by sending an HTTP PUT request to the specified URL.\n#### Request\n\n- Method: PUT\n- URL: `http:\\\\localhost:8081/books`\n#### Request Body\n\n- `id` (number): The unique identifier of the book to cchange.\n    \n- `title` (string): The updated title of the book.\n- `authorId` (number): The ID of the author of the book.\n    \n\n#### Response Body\n\nThe response will contain the updated information of the book after the successful update operation."
					},
					"response": []
				},
				{
					"name": "deleteBook",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http:\\\\localhost:8081/books/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"books",
								"3"
							]
						},
						"description": "### Delete Book\n\nThis endpoint is used to delete a specific book by its ID.\n\n#### Request\n\n- Method: DELETE\n- URL: `http:\\\\localhost:8081/books/3`\n    \n\nThis request does not require a request body.\n\n#### Response\n\n**Response** (`204 NO CONTENT`)\n\nThe response will not contain a body, but will include a status code to indicate the success or failure of the deletion operation."
					},
					"response": []
				}
			],
			"description": "The BookController is a REST API controller responsible for managing books in the system. It provides endpoints for creating, retrieving, updating, and deleting books. Each book is associated with an author, ensuring a relational link between books and their respective authors."
		},
		{
			"name": "author-controller",
			"item": [
				{
					"name": "addAuthor",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"J.R.R. Tolkien\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http:\\\\localhost:8081/authors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"authors"
							]
						},
						"description": "### Add Author\n\nThis endpoint is used to add a new author.\n\n#### Request\n\n- Method: POST\n- URL: `http:\\\\localhost:8081/authors`\n    \n\n#### Request Body\n\n- name (string, required): The name of the author to be added.\n    \n\n#### Response\n\n**Response** (`200 OK`)\n\n``` json\n{\n    \"id\": 3,\n    \"name\": \"J.R.R. Tolkien\",\n    \"books\": []\n}\n\n ```\n\nThe response will contain the details of the newly added author."
					},
					"response": []
				},
				{
					"name": "findAllAuthors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http:\\\\localhost:8081/authors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"authors"
							]
						},
						"description": "This endpoint retrieves a list of authors.\n\n### Request\n\n- Method: GET\n- URL: `http:\\\\localhost:8081/authors`\n    \n\n### Response\n\n**Response** (`200 OK`)\n\n``` json\n[\n    {\n        \"id\": 1,\n        \"name\": \"J.K. Rowling\",\n        \"books\": [\n            {\n                \"id\": 1,\n                \"title\": \"Harry Potter and the Philosopher's Stone\",\n                \"authorId\": 1,\n                \"authorName\": \"J.K. Rowling\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"name\": \"George R.R. Martin\",\n        \"books\": [\n            {\n                \"id\": 2,\n                \"title\": \"Game of Thrones\",\n                \"authorId\": 2,\n                \"authorName\": \"George R.R. Martin\"\n            }\n        ]\n    }\n]\n\n ```\n\nThe response will include a list of authors with their details such as name, biography, and other relevant information."
					},
					"response": []
				},
				{
					"name": "findAuthorById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http:\\\\localhost:8081/authors/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"authors",
								"1"
							]
						},
						"description": "### Get Author Details\n\nThis endpoint retrieves the details of a specific author.\n\n#### Request\n\n- Method: GET\n- URL: `http:\\\\localhost:8081/authors/1`\n    \n\n#### Response\n\n- Status: 200\n- Content-Type: application/json\n- Body:\n    \n    ``` json\n        {\n      \"id\": 1,\n      \"name\": \"J.K. Rowling\",\n      \"books\": [\n          {\n              \"id\": 1,\n              \"title\": \"Harry Potter and the Philosopher's Stone\",\n              \"authorId\": 1,\n              \"authorName\": \"J.K. Rowling\"\n          }\n      ]\n    }\n    \n     ```\n    \n\n```\nThe response body contains the author's ID, name, and a list of books written by the author, including their IDs, titles, and the author's name associated with each book.\n\n ```"
					},
					"response": []
				},
				{
					"name": "updateAuthor",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":3,\r\n    \"name\":\"John Ronald Reuel Tolkien\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http:\\\\localhost:8081/authors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"authors"
							]
						},
						"description": "The `PUT` request updates the information of an author at the specified endpoint `http:\\\\localhost:8081/authors`. The request payload should be in raw JSON format and include the `id` and `name` of the author to be updated.\n\n#### Request\n\n- Method: PUT\n- URL: `http:\\\\localhost:8081/authors`\n    \n\n### Response\n\nThe response to this request is a JSON object with the following schema:  \n**Response** (`200 OK`)\n\n``` json\n{\n    \"id\": 3,\n    \"name\": \"John Ronald Reuel Tolkien\",\n    \"books\": [\n        {\n            \"id\": 4,\n            \"title\": \"The Hobbit: or There and Back Again\",\n            \"authorId\": 3,\n            \"authorName\": \"John Ronald Reuel Tolkien\"\n        }\n    ]\n}\n\n ```\n\nThe `id` and `name` fields in the response represent the updated author information, while the `books` array contains the details of the books associated with the author, including their `id`, `title`, `authorId`, and `authorName`.\n\n### Response\n\n**Response** (`404 Not Found`)\n\n``` json\n{\n    \"timestamp\": \"2025-03-04T15:00:16.982040973\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"exception\": \"ResponseStatusExceptionBody\",\n    \"path\": \"/authors\",\n    \"code\": \"AUTHOR_NOT_FOUND\",\n    \"message\": \"Author not found\"\n}\n\n ```\n\n### Response\n\n**Response** (`400 Bad Request`)\n\n``` json\n{\n\n    \"timestamp\": \"2025-03-04T15:03:44.575420405\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"exception\": \"ResponseStatusExceptionBody\",\n    \"path\": \"/authors\",\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"must not be blank\"\n\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "deleteAuthor",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http:\\\\localhost:8081/authors/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"authors",
								"5"
							]
						},
						"description": "### Delete Author\n\nThis endpoint is used to delete a specific author by their ID.\n\n#### Request\n\n- Method: DELETE\n- URL: `http:\\\\localhost:8081/authors/{id}`\n    \n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- Status: 204\n- Content-Type: text/xml\n- Body: null\n    \n\n### Response\n\n**Response** (`404 Not Found`)\n\n``` json\n{\n    \"timestamp\": \"2025-03-04T15:06:56.5354921\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"exception\": \"ResponseStatusExceptionBody\",\n    \"path\": \"/authors/5\",\n    \"code\": \"AUTHOR_NOT_FOUND\",\n    \"message\": \"Author not found\"\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "The AuthorController is a REST API controller responsible for managing authors in the system. It provides endpoints for creating, retrieving, updating, and deleting authors. Each author can have multiple books associated with them."
		}
	]
}